name: Rebuild LLVM 10.0

on:
  push:
    branches:
      - master
    path:
      # "llvm_patches/*10_0*" pattern is known not to work, i.e. triggers on any commit.
      - "llvm_patches/**"

jobs:
  # Building LLVM in docker, as using native Ubuntu 16.04 github-hosted image contains newer-than-expected libs and
  # makes the resulting build not usable on other Ubuntu 16.04 images.
  linux-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Check environment
      run: |
        cat /proc/cpuinfo

    - name: Build LLVM
      run: |
        cd docker/ubuntu/llvm_build
        docker build --tag ispc/ubuntu16.04 --build-arg REPO=$GITHUB_REPOSITORY --build-arg SHA=$GITHUB_SHA .

    - name: Pack LLVM
      run: |
        cd docker/ubuntu/llvm_build
        docker run ispc/ubuntu16.04
        export CONTAINER=`docker ps --all |head -2 |tail -1 |awk '//{print $1}'`
        sudo docker cp $CONTAINER:/usr/local/src/llvm/bin-10.0 .
        tar cJvf llvm-10.0.0-ubuntu16.04-Release+Asserts-x86.arm.wasm.tar.xz bin-10.0

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: llvm10_linux
        path: docker/ubuntu/llvm_build/llvm-10.0.0-ubuntu16.04-Release+Asserts-x86.arm.wasm.tar.xz

  win-build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    - name: Check environment
      shell: cmd
      run: |
        wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status

    - name: Install dependencies
      shell: cmd
      run: |
        mkdir llvm
        echo ::set-env name=LLVM_HOME::%GITHUB_WORKSPACE%\llvm
        echo ::set-env name=ISPC_HOME::%GITHUB_WORKSPACE%

    - name: Build LLVM
      shell: cmd
      run: |
        echo %LLVM_HOME%
        echo %ISPC_HOME%
        python ./alloy.py -b --version=10.0 --verbose
        cd alloy_results* && type alloy_build.log

    - name: Pack LLVM
      shell: cmd
      run: |
        cd llvm
        7z.exe a -t7z llvm-10.0.0-win.vs2019-Release+Asserts-x86.arm.wasm.zip bin-10.0

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: llvm10_win
        path: llvm/llvm-10.0.0-win.vs2019-Release+Asserts-x86.arm.wasm.zip

  mac-build:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install dependencies
      run: |
        ls -ald /Applications/Xcode*
        xcrun --show-sdk-path
        # There are several Xcode versions installed.
        # /Applications/Xcode.app is a symlink pointing to the one that needs to be used.
        # But the one, which is currently "selected" doesn't use symlink.
        # We need canonical location to make resulting clang build working on other machines.
        sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        xcrun --show-sdk-path
        mkdir llvm
        echo "::set-env name=LLVM_HOME::${GITHUB_WORKSPACE}/llvm"
        echo "::set-env name=ISPC_HOME::${GITHUB_WORKSPACE}"

    - name: Check environment
      run: |
        ./check_env.py
        which -a clang
        sysctl -n machdep.cpu.brand_string

    - name: Build LLVM
      run: |
        ./alloy.py -b --version=10.0 --selfbuild

    - name: Pack LLVM
      run: |
        cd llvm
        tar cJvf llvm-10.0.0-macos10.15-Release+Asserts-x86.arm.wasm.tar.xz bin-10.0

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: llvm10_macos
        path: llvm/llvm-10.0.0-macos10.15-Release+Asserts-x86.arm.wasm.tar.xz


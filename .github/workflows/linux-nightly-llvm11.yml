# Nightly Linux run.

name: Nightly Linux tests / LLVM 11.0

# Run daily - test sse2-avx512 targets @ -O0/-O1/-O2
on:
  schedule:
    - cron:  '0 7 * * *'
  push:
    branches:
      - '**test_nightly**'

env:
  SDE_TAR_NAME: sde-external-8.56.0-2020-07-05-lin

jobs:
  # Building LLVM in docker, as using native Ubuntu 16.04 github-hosted image contains newer-than-expected libs and
  # makes the resulting build not usable on other Ubuntu 16.04 images.
  linux-build-llvm:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Check environment
      run: |
        cat /proc/cpuinfo

    - name: Build LLVM
      run: |
        cd docker/ubuntu/llvm_build
        docker build --tag ispc/ubuntu16.04 --build-arg REPO=$GITHUB_REPOSITORY --build-arg SHA=$GITHUB_SHA --build-arg LLVM_VERSION=11.0 .

    - name: Pack LLVM
      run: |
        cd docker/ubuntu/llvm_build
        docker run ispc/ubuntu16.04
        export CONTAINER=`docker ps --all |head -2 |tail -1 |awk '//{print $1}'`
        sudo docker cp $CONTAINER:/usr/local/src/llvm/bin-11.0 .
        tar cJvf llvm-11.0-ubuntu16.04-Release+Asserts-x86.arm.wasm.tar.xz bin-11.0

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: llvm_11.0_linux
        path: docker/ubuntu/llvm_build/llvm-11.0-ubuntu16.04-Release+Asserts-x86.arm.wasm.tar.xz

  linux-build:
    runs-on: ubuntu-latest
    needs: linux-build-llvm

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Download package
      uses: actions/download-artifact@v2
      with:
        name: llvm_11.0_linux

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install bison flex libc6-dev-i386 g++-multilib lib32stdc++6 ncurses-dev
        tar xvf llvm-11.0-ubuntu16.04-Release+Asserts-x86.arm.wasm.tar.xz
        echo "::add-path::${GITHUB_WORKSPACE}/bin-11.0/bin"

    - name: Check environment
      run: |
        ./check_env.py
        which -a clang
        cat /proc/cpuinfo

    - name: Build package
      run: |
        mkdir build && cd build
        cmake .. -DISPC_PREPARE_PACKAGE=ON -DISPC_INCLUDE_BENCHMARKS=ON
        make -j4 package

    - name: Sanity testing (make check-all, make test)
      run: |
        cd build
        bin/check_isa
        bin/ispc --support-matrix
        make check-all
        make ispc_benchmarks && make test

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: ispc_llvm_11.0_linux
        path: build/ispc-trunk-linux.tar.gz

  test:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        target: [sse2-i32x4, sse2-i32x8,
                 sse4-i8x16, sse4-i16x8, sse4-i32x4, sse4-i32x8,
                 avx1-i32x4, avx1-i32x8, avx1-i32x16, avx1-i64x4,
                 avx2-i8x32, avx2-i16x16, avx2-i32x4, avx2-i32x8, avx2-i32x16, avx2-i64x4,
                 avx512knl-i32x16,
                 avx512skx-i32x8, avx512skx-i32x16, avx512skx-i8x64, avx512skx-i16x32]
    runs-on: ubuntu-latest
    needs: linux-build
    steps:
    - uses: actions/checkout@v2
    - name: Download package
      uses: actions/download-artifact@v2
      with:
        name: ispc_llvm_11.0_linux
    - name: Install dependencies and unpack artifacts
      run: |
        sudo apt-get update && sudo apt-get install libc6-dev-i386 g++-multilib lib32stdc++6
        find /usr -name cdefs.h
        wget --user-agent='Mozilla/4.0' https://software.intel.com/content/dam/develop/external/us/en/documents/$SDE_TAR_NAME.tar.bz2
        tar xvf $SDE_TAR_NAME.tar.bz2
        echo "::add-path::${GITHUB_WORKSPACE}/$SDE_TAR_NAME"
        tar xvf ispc-trunk-linux.tar.gz
        echo "::add-path::${GITHUB_WORKSPACE}/ispc-trunk-linux/bin"
        echo "::set-env name=LLVM_HOME::${GITHUB_WORKSPACE}"
        echo "::set-env name=ISPC_HOME::${GITHUB_WORKSPACE}"
    - name: Check environment
      run: |
        cat /proc/cpuinfo
    - name: Running tests
      run: |
        ./alloy.py -r --only="stability current -O0 -O1 -O2" --only-targets="${{ matrix.target }}" --time --update-errors=FP
    - name: Upload fail_db.txt
      uses: actions/upload-artifact@v2
      with:
        name: fail_db.${{matrix.target}}.txt
        path: fail_db.txt
    - name: Check
      run: |
        # Print fails to the log.
        git diff
        # Exit with error code is there are fails.
        [ -z "`git diff`" ]

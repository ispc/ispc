#!@Python3_EXECUTABLE@ -uB
#
#  Copyright (c) 2019-2021, Intel Corporation
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#    * Neither the name of Intel Corporation nor the names of its
#      contributors may be used to endorse or promote products derived from
#      this software without specific prior written permission.
#
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
#   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import sys, os
import subprocess
import argparse
import re

from PIL import Image
import numpy as np

def get_img_diff_MSE(file_path_a, file_path_b):
  image_a = Image.open(file_path_a)
  image_b = Image.open(file_path_b)
  diff = np.asarray(image_a) - np.asarray(image_b)
  return np.mean(diff**2)

def compare_images(image0, image1, image_cmp_th):
  if not image1:
    print("Incorrect arguments (image1 is None)")
    return False

  if not os.path.isfile(image0):
    print('No such file: {0}'.format(image0))
    return False

  if not os.path.isfile(image1):
    print('No such file: {0}'.format(image1))
    return False

  error = get_img_diff_MSE(image0, image1)
  if error > image_cmp_th:
    print("Failed correctness test with MSE: %f / %f" % (error, image_cmp_th))
  else:
    print("Passed correctness test with MSE: %f / %f" % (error, image_cmp_th))
  return error < image_cmp_th

parser = argparse.ArgumentParser()
parser.add_argument('dir', type=str)
parser.add_argument('exe_name', type=str)
parser.add_argument('-res_image', dest='res_image', type=str)
parser.add_argument('-ref_image', dest='ref_image', type=str)
parser.add_argument('-image_cmp_th', dest='image_cmp_th', type=float)
args, unknown = parser.parse_known_args()

print("Found additional arguments: ", unknown, " Will append these to cmd line.")
print("Using [" + args.exe_name + "] test in " + args.dir)

additional_path = ""
additional_libs = ""

cur_dir = os.path.dirname(os.path.realpath(__file__))
test_dir = os.path.join(cur_dir, str(args.dir))

if os.name != 'nt':
    local_lib = "/usr/local/lib"
    runtime_lib = os.path.join(cur_dir, "../../../install/lib")
    additional_libs = os.pathsep + os.pathsep.join([runtime_lib, local_lib])

print("Using runtime lib path: ", additional_libs)

test_env = os.environ.copy()
if "PATH" in test_env:
  test_env["PATH"] += additional_path
else:
  test_env["PATH"] = additional_path
if "LD_LIBRARY_PATH" in test_env:
  test_env["LD_LIBRARY_PATH"] += additional_libs
else:
  test_env["LD_LIBRARY_PATH"] = additional_libs

host_name = args.exe_name
executable = os.path.join(test_dir, host_name)

cmd = [executable] + unknown

print("Using host name: ", host_name)
print("Attempting to access executable at: ", executable)

try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=test_env, cwd=test_dir)
    out, err = p.communicate()
    print(out)
    if p.returncode:
        raise subprocess.CalledProcessError('Workload returned non-zero error code')
    if args.res_image and args.ref_image:
        if not compare_images(os.path.join(test_dir, args.res_image), os.path.join(test_dir, args.ref_image), args.image_cmp_th):
            sys.exit(-1)
        else:
            sys.exit(0)
except subprocess.CalledProcessError as e:
    print("Return code is ", p.returncode)
    print(e.message)
    sys.exit(p.returncode)

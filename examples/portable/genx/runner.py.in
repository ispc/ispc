#!@Python3_EXECUTABLE@ -uB
#
#  Copyright (c) 2019, Intel Corporation
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#    * Neither the name of Intel Corporation nor the names of its
#      contributors may be used to endorse or promote products derived from
#      this software without specific prior written permission.
#
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
#   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import sys, os
import subprocess
import argparse
import re

parser = argparse.ArgumentParser()
parser.add_argument('dir', type=str)
parser.add_argument('exe_name', type=str)
args, unknown = parser.parse_known_args()

print("Found additional arguments: ", unknown, " Will append these to cmd line.")
print("Using [" + args.exe_name + "] test in " + args.dir)

additional_path = ""
additional_libs = ""

if os.name == 'nt':
    mdf_path = "@MDF@"
    compiler_lib = mdf_path + "/compiler/lib/x86"
    runtime_lib = mdf_path + "/runtime/lib/x86"
    additional_path = os.pathsep + os.pathsep.join([compiler_lib, runtime_lib])
else:
    sycl_path = "@SYCL@"
    cmc_path = "@CMC_INSTALL_PATH@"
    sycl_lib = sycl_path + "/lib"
    sycl_bin = sycl_path + "/bin"
    cmc_lib = cmc_path + "/lib"
    additional_path = os.pathsep + os.pathsep.join([sycl_bin])
    additional_libs = os.pathsep + os.pathsep.join([sycl_lib, cmc_lib])

test_env = os.environ.copy()
test_env["PATH"] += additional_path
test_env["LD_LIBRARY_PATH"] = additional_libs

cur_dir = os.path.dirname(os.path.realpath(__file__))
test_dir = os.path.join(cur_dir, str(args.dir))

host_name = args.exe_name
executable = os.path.join(test_dir, host_name)
#cmd = [executable, '1', '1', '16']
cmd = [executable] + unknown

print("Using host name: ", host_name)
print("Attempting to access executable at: ", executable)

success = re.compile(r'passed', re.IGNORECASE)

try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=test_env, cwd=test_dir)
    out, err = p.communicate()
    print(out)
    if not success.search(out.decode()):
        sys.exit(-1)
except subprocess.CalledProcessError as e:
    print("Return code is ", p.returncode)
    print(e.message)
    sys.exit(p.returncode)


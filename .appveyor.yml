#  Copyright (c) 2018-2019, Intel Corporation
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#    * Neither the name of Intel Corporation nor the names of its
#      contributors may be used to endorse or promote products derived from
#      this software without specific prior written permission.
#
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
#   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

configuration: Release

environment:
  LLVM_LATEST: 8.0
  DOCKER_PATH: "ispc/test_repo"
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1604
      LLVM_VERSION: latest
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      LLVM_VERSION: 5.0
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      LLVM_VERSION: 6.0
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      LLVM_VERSION: 7.0
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      LLVM_VERSION: latest

init:
  - cmd: |-
      set ISPC_HOME=%APPVEYOR_BUILD_FOLDER%
      set LLVM_HOME=C:\projects\llvm
      set CHOCO_DIR=%ProgramData%\chocolatey
      if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2017" ( set generator="Visual Studio 15" )
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"
  - sh: |-
      export ISPC_HOME=$APPVEYOR_BUILD_FOLDER
      export LLVM_HOME=/usr/local/src/llvm

cache:
  - '%CHOCO_DIR%\bin -> .appveyor.yml'
  - '%CHOCO_DIR%\lib -> .appveyor.yml'
  - '%LLVM_HOME% -> .appveyor-clean-cache.txt'

install:
  - cmd: |-
      cinst winflexbison
      set FLEX_PATH=%CHOCO_DIR%\lib\winflexbison\tools
      if exist "%FLEX_PATH%\win_flex.exe" ( cd %FLEX_PATH% && ren win_flex.exe flex.exe )
      if exist "%LLVM_HOME%\bin\" set NONEEDLLVM=rem
      if "%LLVM_VERSION%" == "latest" set LLVM_VERSION=%LLVM_LATEST%
      set LLVM_SHORT_VER=%LLVM_VERSION:.=%
      set DOCKER_NAME=%DOCKER_PATH%:win_llvm%LLVM_SHORT_VER%
      %NONEEDLLVM% docker pull %DOCKER_NAME%
      %NONEEDLLVM% docker run -d %DOCKER_NAME%
      %NONEEDLLVM% docker ps --all  --format "{{.ID}}" --filter ancestor=%DOCKER_NAME% | head -1 > container_id.txt
      %NONEEDLLVM% set /p CONTAINER=<container_id.txt
      %NONEEDLLVM% docker cp %CONTAINER%:%LLVM_HOME%\bin-%LLVM_VERSION% %LLVM_HOME%
      set PATH=%LLVM_HOME%\bin;C:\Python37\;C:\Python37\Scripts;%CHOCO_DIR%\lib\winflexbison\tools;%PATH%
  - sh: |-
      sudo apt-get install -y flex libc6-dev-i386 g++-multilib lib32stdc++6
      if [ "$LLVM_VERSION" = "latest" ]; then 
        export LLVM_VERSION=$LLVM_LATEST
      fi;
      LLVM_SHORT_VER=${LLVM_VERSION/\.}
      export DOCKER_NAME=$DOCKER_PATH:ubuntu_llvm$LLVM_SHORT_VER
      if [ ! -d "$LLVM_HOME/bin-$LLVM_VERSION/bin" ]; then
        docker pull "$DOCKER_NAME"
        docker run "$DOCKER_NAME"
        export CONTAINER=`docker ps --all |head -2 |tail -1 |awk '//{print $1}'`
        sudo docker cp $CONTAINER:$LLVM_HOME $LLVM_HOME
      fi
      export PATH=$LLVM_HOME/bin-$LLVM_VERSION/bin:$PATH

before_build:
  - cmd: |-
      cd %ISPC_HOME% && mkdir build && cd build
      cmake .. -G %generator% -DCMAKE_INSTALL_PREFIX=%ISPC_HOME%\install -DISPC_PREPARE_PACKAGE=ON -DM4_EXECUTABLE=C:\cygwin64\bin\m4.exe
  - sh: |-
      cd $ISPC_HOME && mkdir build && cd build
      cmake ../ -DISPC_PREPARE_PACKAGE=ON -DCMAKE_INSTALL_PREFIX=%ISPC_HOME%/install

build_script:
  - cmd: msbuild %ISPC_HOME%\build\PACKAGE.vcxproj
  - sh: make package -j4

test_script:
  - cmd: |-
      msbuild c:\projects\ispc\build\tests\check-all.vcxproj /t:Build
      set PATH=%ISPC_HOME%\build\bin\%configuration%;%PATH%
      cd %ISPC_HOME%
      check_isa.exe
      python perf.py -n 1 -g "Visual Studio 15 Win64"
# Run only lit testing here since we have full testing in Travis
  - sh: make check-all

artifacts:
  - path: build/ispc-*
    name: ispc

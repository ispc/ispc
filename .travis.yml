#  Copyright (c) 2018-2023, Intel Corporation
#
#  SPDX-License-Identifier: BSD-3-Clause
#   Author: Dmitry Babokin


# "minimal" instead of "cpp", because of https://github.com/travis-ci/travis-ci/issues/8363
# Otherwise during python invocation PATH is prepended by /usr/bin and it yields wrong llvm-as.
language: minimal
sudo: required

# Note, global env variables are not used, even though they would make sense, because they appear first in
# web view and hide matrix env variables.

jobs:
  include:
    # ARM build
    # LLVM 16.0 + Ubuntu 18.04:
    #   - ARM only (default): build, lit tests, examples (build)
    #   - ARM + x86: build, lit tests, examples (build), tests (aarch64)
    - stage: test
      os: linux
      arch: arm64
      dist: bionic
      env:
        - LLVM_VERSION=16.0 OS=Ubuntu18.04aarch64
        - LLVM_TAR=llvm-16.0.6-ubuntu18.04aarch64-Release+Asserts-x86.arm.wasm.tar.xz
        - LLVM_REPO=https://github.com/ispc/ispc.dependencies
        - ISPC_HOME=$TRAVIS_BUILD_DIR
      before_install:
        - cat /proc/cpuinfo
        - sudo apt-get update
        - dpkg --print-architecture
        - dpkg --print-foreign-architectures
        - sudo apt-get install flex libc6-dev libc6-dev-armhf-cross libc6-dev-i386-cross libc6-dev-i386-amd64-cross libtbb-dev
        - find /usr -name cdefs.h
        - if [[ "${TRAVIS_CPU_ARCH}" == "arm64" ]]; then
            sudo apt-get install libuv1 rhash libstdc++6;
            wget https://anaconda.org/conda-forge/cmake/3.17.0/download/linux-aarch64/cmake-3.17.0-h28c56e5_0.tar.bz2;
            mkdir $HOME/cmake;
            tar -xjvf cmake-3.17.0-h28c56e5_0.tar.bz2 -C $HOME/cmake;
            export PATH=$HOME/cmake/bin:$PATH;
          fi
        - wget $LLVM_REPO/releases/download/llvm-$LLVM_VERSION-ispc-dev/$LLVM_TAR
        - tar xvf $LLVM_TAR
        - export PATH=`pwd`/bin-$LLVM_VERSION/bin:$PATH
      script:
        # "Native-only" build (i.e. only arm and aarch64 are supported).
        - mkdir build-arm && cd build-arm
        - cmake .. -DCMAKE_CXX_FLAGS="-Werror"
        - make -j`nproc`
        - make check-all
        - bin/ispc --support-matrix
        # Cross build (x86, x86-64, arm, aarch64 are supported, Linux only).
        - cd ..
        - mkdir build-all && cd build-all
        - cmake .. -DX86_ENABLED=ON -DCMAKE_CXX_FLAGS="-Werror"
        - make -j`nproc`
        - make check-all
        - bin/ispc --support-matrix
        - cp bin/ispc ..
        - cd ..
        - export ISPC_HOME=`pwd`
        - ./run_tests.py --arch=aarch64 --target=neon-i32x4

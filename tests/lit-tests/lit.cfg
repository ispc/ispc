import os
import platform
import subprocess
from distutils.version import LooseVersion

import lit.formats

config.name = 'ispc'
config.suffixes = ['.ispc']

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(False)

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
ispc_test_exec_root = lit_config.params.get('ispc_test_exec_root','')
# LLVM version used to build ISPC
ispc_llvm_version_number = lit_config.params.get('ispc_llvm_version_number','')

if ispc_test_exec_root != '':
    config.test_exec_root = ispc_test_exec_root

config.substitutions.append(('%{ispc}', 'ispc'))
config.substitutions.append(('FileCheck', 'FileCheck'))

print("Config:")

# LLVM version
llvm_version = LooseVersion(ispc_llvm_version_number)

if llvm_version >= LooseVersion("12.0.0"):
    print("LLVM_12_0+: YES")
    config.available_features.add("LLVM_12_0+")
else:
    print("LLVM_12_0+: NO")

if llvm_version >= LooseVersion("14.0.0"):
    print("LLVM_14_0+: YES")
    config.available_features.add("LLVM_14_0+")
else:
    print("LLVM_14_0+: NO")

# Windows target OS is enabled
windows_enabled = lit_config.params.get('windows_enabled')
if windows_enabled == "ON":
    print("WINDOWS_ENABLED: YES")
    config.available_features.add("WINDOWS_ENABLED")
elif windows_enabled == "OFF":
    print("WINDOWS_ENABLED: NO")
else:
    sys.exit("Cannot parse windows_enabled: " + windows_enabled)

# ARM support on macOS target is enabled
macos_arm_enabled = lit_config.params.get('macos_arm_enabled')
if macos_arm_enabled == "ON":
    print("MACOS_ARM_ENABLED: YES")
    config.available_features.add("MACOS_ARM_ENABLED")
elif macos_arm_enabled == "OFF":
    print("MACOS_ARM_ENABLED: NO")
else:
    sys.exit("Cannot parse macos_arm_enabled: " + macos_arm_enabled)

# x86 backend
x86_enabled = lit_config.params.get('x86_enabled')
if x86_enabled == "ON":
    print("X86_ENABLED: YES")
    config.available_features.add("X86_ENABLED")
elif x86_enabled == "OFF":
    print("X86_ENABLED: NO")
else:
    sys.exit("Cannot parse x86_enabled: " + x86_enabled)

# ARM backend
arm_enabled = lit_config.params.get('arm_enabled')
if arm_enabled == "ON":
    print("ARM_ENABLED: YES")
    config.available_features.add("ARM_ENABLED")
elif arm_enabled == "OFF":
    print("ARM_ENABLED: NO")
else:
    sys.exit("Cannot parse arm_enabled: " + arm_enabled)

# WebAssembly backend
wasm_enabled = lit_config.params.get('wasm_enabled')
if wasm_enabled == "ON":
    print("WASM_ENABLED: YES")
    config.available_features.add("WASM_ENABLED")
elif wasm_enabled == "OFF":
    print("WASM_ENABLED: NO")
else:
    sys.exit("Cannot parse wasm_enabled: " + wasm_enabled)

# Xe backend
xe_enabled = lit_config.params.get('xe_enabled', '0')
if xe_enabled == "ON":
    print("XE_ENABLED: YES")
    config.available_features.add("XE_ENABLED")
elif xe_enabled == "OFF":
    print("XE_ENABLED: NO")
else:
    sys.exit("Cannot parse xe_enabled: " + xe_enabled)

# Ocloc
status, output = subprocess.getstatusoutput("ocloc")
if status == 0:
    print("OCLOC_INSTALLED: YES")
    config.available_features.add("OCLOC_INSTALLED")
else:
    print("OCLOC_INSTALLED: NO")

# detect host OS
if platform.system() == "Windows":
    print("HOST OS: WINDOWS")
    config.available_features.add("WINDOWS_HOST")
elif platform.system() == "Linux":
    print("HOST OS: LINUX")
    config.available_features.add("LINUX_HOST")
elif platform.system() == "Darwin":
    print("HOST OS: MACOS")
    config.available_features.add("MACOS_HOST")
else:
    print("HOST OS: UNKNOWN")
